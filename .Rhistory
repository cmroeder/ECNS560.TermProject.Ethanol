rename(head_sold = X2, breed = X3, avg_weight_lbs = X5, price_cwt = X7, seller_name = X9)
View(lambsales3)
saveRDS(lambsales4, "Centennial.LambReport.09272023")
saveRDS(lambsales3, "Centennial.LambReport.09272023")
View(lambsales)
saveRDS(lambsales3, "Centennial.LambReport.09272023")
View(lambsales3)
Sys.setenv(nass_key = "4B2007F7-A80E-383E-9A81-5838343AB544")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
short_desc = "AG LAND, PASTURELAND - ASSET VALUE, MEASURED IN $ / ACRE",
agg_level_desc = "STATE",
year_GT = "1995"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
pastureland_values = as_tibble(json$data)
pastureland_values
View(pastureland_values)
PL_values = pastureland_values %>%
select(state_fips_code, state_name, year, Value, unit_desc)
PL_values1 = PL_values %>%
mutate(Value = str_replace_all(Value, "(D)", NA_character_),
Value = str_replace_all(Value, "(S)", NA_character_)
)
PL_values2 = PL_values1 %>%
mutate(Value = str_replace_all(Value, ",", "")
)
PL_values3 = PL_values2 %>%
mutate(Value = as.integer(Value))
PL_values4 = PL_values3 %>%
rename(fips = state_fips_code,
state = state_name,
value = Value,
unit = unit_desc
)
saveRDS(PL_values4, "clean.pasturelandvalues.rds")
View(PL_values4)
MT_Pastureland_Values = PL_values4 %>%
filter(state == "MONTANA") %>%
ggplot(aes(x = year, y = value))+
geom_line(color = "blue") +
labs(title = "Montana Pastureland Values 1997-2023",
x = "Year",
y = "$/Acre")
MT_Pastureland_Values
write.csv(lambsales3, "Centennial.LambReport.09272023")
write.csv(pastureland_values, "dirty.pasturelandvalues.rds")
write.csv(PL_values4, "clean.pasturelandvalues.rds")
lambsales3 = lambsales2 |>
rename(head_sold = X2, breed = X3, avg_weight_lbs = X5, price_cwt = X7, origin = X9)
write.csv(lambsales3, "Centennial.LambReport.09272023")
lambsales4 = lambsales3 |>
mutate(total_lbs = head_sold*avg_weight_lbs) |>
select(breed, avg_weight_lbs, price_cwt) |>
group_by(breed)
lambsales4 = lambsales3 |>
as.integer(head_sold, avg_weight_lbs, price_cwt)
lambsales4 = lambsales3 |>
mutate(as.integer(head_sold, avg_weight_lbs, price_cwt))
View(lambsales4)
View(lambsales4)
lambsales4 = lambsales3 |>
as.integer(head_sold, avg_weight_lbs, price_cwt)
lambsales4 = as.integer(lambsales3$head_sold, lambsales3$avg_weight_lbs, lambsales3$price_cwt)
lambsales4 = lambsales3 |>
mutate(as.integer(head_sold = head_sold, avg_weight_lbs = avg_weight_lbs, price_cwt = price_cwt)
lambsales4 = lambsales3 |>
mutate(as.integer(head_sold = head_sold, avg_weight_lbs = avg_weight_lbs, price_cwt = price_cwt))
lambsales4 = lambsales3 |>
mutate(head_sold = as.integer(head_sold),
avg_weight_lbs = as.integer(avg_weight_lbs),
price_cwt = as.integer(price_cwt))
View(lambsales4)
write.csv(lambsales3, "Centennial.LambReport.09272023")
write.csv(lambsales4, "Centennial.LambReport.09272023")
lambsales5 = lambsales4 |>
mutate(total_lbs = head_sold*avg_weight_lbs) |>
select(breed, avg_weight_lbs, price_cwt) |>
group_by(breed)
View(lambsales5)
lambsales5 = lambsales4 |>
mutate(total_lbs = head_sold*avg_weight_lbs) |>
group_by(breed) |>
select(breed, avg_weight_lbs, price_cwt)
lambsales5 = lambsales4 |>
mutate(total_lbs = head_sold*avg_weight_lbs) |>
lambsales5 = lambsales4 |>
mutate(total_lbs = head_sold*avg_weight_lbs)
View(lambsales5)
lambsales6 = lambsales5 |>
select(breed, total_lbs_sold, price_cwt)
lambsales5 = lambsales4 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs)
lambsales6 = lambsales5 |>
select(breed, total_lbs_sold, price_cwt)
lambsales7 = lambsales6 |>
group_by(breed)
View(lambsales7)
lambsales7 = lambsales6 |>
summarize(breed)
View(lambsales7)
lambsales7 = lambsales6 |>
summarize()
?group_by
lambsales7 = lambsales6 |>
group_by(breed)
View(lambsales7)
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(total_lbs_sold) |>
summarize(price_cwt)
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(total_lbs_sold)
View(lambsales7)
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(across(where(is.numeric),mean))
View(lambsales7)
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(across(round((where(is.numeric),mean)))
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(across(round(where(is.numeric),mean)))
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(round(across(where(is.numeric),mean)))
View(lambsales7)
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(across(where(is.numeric),mean))
lambsales7 = lambsales6 |>
group_by(breed) |>
summarize(round(across(where(is.numeric),mean)))
lambsales6 |>
group_by(breed) |>
summarize(round(across(where(is.numeric),mean)))
lambsales6 |>
group_by(breed) |>
summarize(round(mean_price_cwt = mean(price_cwt))) |>
summarize(round(total_lbs_sold = sum(total_lbs_sold)))
lambsales6 |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
lambsales5 |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
lambsales5 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs) |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
lambsales4 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs) |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
lambsales4 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs) |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
lambsale.summary.bybreed = lambsales4 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs) |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
View(lambsale.summary.bybreed)
library(httr)
library(jsonlite)
library(stringr)
library(ggplot2)
library(rvest)
library(tidyverse)
url = "https://casauction.com/2023/09/28/wednesday-september-27-2023-market-results-sheep-goats-hogs-horses/"
page = read_html(url)
page
tables = page |>
html_elements("table")
tables
lambsales = tables [[1]] |>  html_table()
lambsales
rows_to_keep = c(8:22)
lambsales1 = lambsales |>
slice(rows_to_keep)
lambsales2 = lambsales1 |>
select(X2, X3, X5, X7, X9)
lambsales3 = lambsales2 |>
rename(head_sold = X2, breed = X3, avg_weight_lbs = X5, price_cwt = X7, origin = X9)
lambsales4 = lambsales3 |>
mutate(head_sold = as.integer(head_sold),
avg_weight_lbs = as.integer(avg_weight_lbs),
price_cwt = as.integer(price_cwt))
write.csv(lambsales4, "Centennial.LambReport.09272023")
lambsale.summary.bybreed = lambsales4 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs) |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
Sys.setenv(nass_key = "4B2007F7-A80E-383E-9A81-5838343AB544")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
short_desc = "AG LAND, PASTURELAND - ASSET VALUE, MEASURED IN $ / ACRE",
agg_level_desc = "STATE",
year_GT = "1995"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
pastureland_values = as_tibble(json$data)
pastureland_values
write.csv(pastureland_values, "dirty.pasturelandvalues.rds")
PL_values = pastureland_values %>%
select(state_fips_code, state_name, year, Value, unit_desc)
PL_values1 = PL_values %>%
mutate(Value = str_replace_all(Value, "(D)", NA_character_),
Value = str_replace_all(Value, "(S)", NA_character_)
)
PL_values2 = PL_values1 %>%
mutate(Value = str_replace_all(Value, ",", "")
)
PL_values3 = PL_values2 %>%
mutate(Value = as.integer(Value))
PL_values4 = PL_values3 %>%
rename(fips = state_fips_code,
state = state_name,
value = Value,
unit = unit_desc
)
write.csv(PL_values4, "clean.pasturelandvalues.rds")
MT_Pastureland_Values = PL_values4 %>%
filter(state == "MONTANA") %>%
ggplot(aes(x = year, y = value))+
geom_line(color = "blue") +
labs(title = "Montana Pastureland Values 1997-2023",
x = "Year",
y = "$/Acre")
MT_Pastureland_Values
View(lambsale.summary.bybreed)
MT_Pastureland_Values = PL_values4 %>%
filter(state == "MONTANA") %>%
ggplot(aes(x = year, y = value))+
geom_line(color = "blue") +
labs(title = "Montana Pastureland Values 1997-2023",
x = "Year",
y = "$/Acre")
MT_Pastureland_Values
lambsales4 |>
mutate(total_lbs_sold = head_sold*avg_weight_lbs) |>
select(breed, total_lbs_sold, price_cwt) |>
group_by(breed) |>
summarize(
mean_price_cwt = round(mean(price_cwt)),
total_lbs_sold = round(sum(total_lbs_sold))
)
Sys.setenv(nass_key = "4B2007F7-A80E-383E-9A81-5838343AB544")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
short_desc = "CORN, GRAIN - PRODUCTION, MEASURED IN BU",
domain_desc = "TOTAL"
agg_level_desc = "STATE",
Sys.setenv(nass_key = "4B2007F7-A80E-383E-9A81-5838343AB544")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
short_desc = "CORN, GRAIN - PRODUCTION, MEASURED IN BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GT = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornprices = as_tibble(json$data)
library(tidyverse)
cornprices = as_tibble(json$data)
cornprices
View(cornprices)
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
short_desc = "CORN, GRAIN - PRODUCTION, MEASURED IN BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GT = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornprices = as_tibble(json$data)
cornprices
Sys.setenv(nass_key = "4B2007F7-A80E-383E-9A81-5838343AB544")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRODUCTION",
short_desc = "CORN, GRAIN - PRODUCTION, MEASURED IN BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GT = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornproduction = as_tibble(json$data)
cornproduction
View(cornproduction)
setwd("C:/Users/cmeta/OneDrive/Documents/GitHub/ECNS561.TermProject.Ethanol/New folder")
setwd("C:/Users/cmeta/OneDrive/Documents/GitHub/ECNS561.TermProject.Ethanol")
saveRDS("/Data/CornProduction/dirtycornproduction.rds")
saveRDS(cornproduction, "/Data/CornProduction/dirtycornproduction.rds")
saveRDS(cornproduction, "Data/CornProduction/dirtycornproduction.rds")
cornproduction <- readRDS("~/GitHub/ECNS561.TermProject.Ethanol/Data/CornProduction/dirtycornproduction.rds")
Sys.setenv(nass_key = "4B2007F7-A80E-383E-9A81-5838343AB544")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRICE RECEIVED",
short_desc = "CORN, GRAIN - PRICE RECEIVED, MEASURED IN $/BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GT = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornprices = as_tibble(json$data)
cornprices
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRICE RECEIVED",
short_desc = "CORN, GRAIN - PRICE RECEIVED, MEASURED IN $ / BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GT = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRICE RECEIVED",
short_desc = "CORN, GRAIN - PRICE RECEIVED, MEASURED IN $ / BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GE = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRICE RECEIVED",
short_desc = "CORN, GRAIN - PRICE RECEIVED, MEASURED IN $ / BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GE = "1960",
freq_desc = "ANNUAL"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRODUCTION",
short_desc = "CORN, GRAIN - PRODUCTION, MEASURED IN BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GE = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornproduction = as_tibble(json$data)
cornproduction
saveRDS(cornproduction, "Data/CornProduction/dirtycornproduction.rds")
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRICE RECEIVED",
short_desc = "CORN, GRAIN - PRICE RECEIVED, MEASURED IN $ / BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year_GE = "1960",
freq_desc = "ANNUAL"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornprices = as_tibble(json$data)
cornprices
saveRDS(cornprices, "Data/CornPrices/dirtycornprices.rds")
View(cornproduction)
View(cornprices)
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRODUCTION",
short_desc = "CORN, GRAIN - PRODUCTION, MEASURED IN BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year__GE = "1960"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornproduction = as_tibble(json$data)
cornproduction
saveRDS(cornproduction, "Data/CornProduction/dirtycornproduction.rds")
View(cornproduction)
url = "https://quickstats.nass.usda.gov/"
endpoint = "api/api_GET/"
params = list(
key = Sys.getenv("nass_key"),
format = "JSON",
source_desc = "SURVEY",
statisticcat_desc = "PRICE RECEIVED",
short_desc = "CORN, GRAIN - PRICE RECEIVED, MEASURED IN $ / BU",
domain_desc = "TOTAL",
agg_level_desc = "STATE",
year__GE = "1960",
freq_desc = "ANNUAL"
)
response = httr::GET(url = url, path = endpoint, query = params)
response
json = response |>
httr::content("text") |>
jsonlite::fromJSON()
cornprices = as_tibble(json$data)
cornprices
saveRDS(cornprices, "Data/CornPrices/dirtycornprices.rds")
dirtycornprices <- readRDS("C:/Users/cmeta/OneDrive/Documents/GitHub/ECNS561.TermProject.Ethanol/Data/CornPrices/dirtycornprices.rds")
