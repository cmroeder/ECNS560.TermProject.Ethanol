"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws",
drop = c("All Fuel Stations", "Ethanol Production (thousand barrels)", "Corn Production (bushels)", "Corn Prices ($)", "Population"))
fixest::etable(a, b, c, tex=TRUE, digits="r2",
fontsize = "scriptsize",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"tax_incentives" = "Tax Incentives",
"grant_incentives" = "Grant Incentives",
"other_incentives" = "Other Incentives",
"regulations" = "Regulations",
"total" = "All Fuel Stations",
"eth.production" = "Ethanol Production (thousand barrels)",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws",
drop = c("A", "E", "C", "P"))
#create results table for lagged variables
fixest::etable(d, tex=TRUE, digits="r2",
fontsize = "scriptsize",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"incentives" = "Incentives",
"incentives_lag1" = "Incentives (Lag 1 YR)",
"incentives_lag2" = "Incentives (Lag 2 YR)",
"incentives_lag3" = "Incentives (Lag 3 YR)",
"regulations" = "Regulations",
"regulations_lag1" = "Regulations (Lag 1 YR)",
"regulations_lag2" = "Regulations (Lag 2 YR)",
"regulations_lag3" = "Regulations (Lag 3 YR)",
"eth.production" = "Ethanol Production (thousand barrels)",
"total" = "All Fuel Stations",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws with Lagged Law Variables",
drop = c("A", "E", "C", "P"))
fixest::etable(d, tex=TRUE, digits="r2",
fontsize = "scriptsize",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"incentives" = "Incentives",
"incentives_lag1" = "Incentives (Lag 1 Year)",
"incentives_lag2" = "Incentives (Lag 2 Year)",
"incentives_lag3" = "Incentives (Lag 3 Year)",
"regulations" = "Regulations",
"regulations_lag1" = "Regulations (Lag 1 Year)",
"regulations_lag2" = "Regulations (Lag 2 Year)",
"regulations_lag3" = "Regulations (Lag 3 Year)",
"eth.production" = "Ethanol Production (thousand barrels)",
"total" = "All Fuel Stations",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws with Lagged Law Variables",
drop = c("A", "E", "C", "P"))
#create results table for lagged variables
fixest::etable(d, tex=TRUE, digits="r2",
fontsize = "normalsize",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"incentives" = "Incentives",
"incentives_lag1" = "Incentives (Lag 1 Year)",
"incentives_lag2" = "Incentives (Lag 2 Year)",
"incentives_lag3" = "Incentives (Lag 3 Year)",
"regulations" = "Regulations",
"regulations_lag1" = "Regulations (Lag 1 Year)",
"regulations_lag2" = "Regulations (Lag 2 Year)",
"regulations_lag3" = "Regulations (Lag 3 Year)",
"eth.production" = "Ethanol Production (thousand barrels)",
"total" = "All Fuel Stations",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws with Lagged Law Variables",
drop = c("A", "E", "C", "P"))
#create results table for lagged variables
fixest::etable(d, tex=TRUE, digits="r2",
fontsize = "small",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"incentives" = "Incentives",
"incentives_lag1" = "Incentives (Lag 1 Year)",
"incentives_lag2" = "Incentives (Lag 2 Year)",
"incentives_lag3" = "Incentives (Lag 3 Year)",
"regulations" = "Regulations",
"regulations_lag1" = "Regulations (Lag 1 Year)",
"regulations_lag2" = "Regulations (Lag 2 Year)",
"regulations_lag3" = "Regulations (Lag 3 Year)",
"eth.production" = "Ethanol Production (thousand barrels)",
"total" = "All Fuel Stations",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws with Lagged Law Variables",
drop = c("A", "E", "C", "P"))
fixest::etable(a, b, c, tex=TRUE, digits="r2",
fontsize = "scriptsize",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"tax_incentives" = "Tax Incentives",
"grant_incentives" = "Grant Incentives",
"other_incentives" = "Other Incentives",
"regulations" = "Regulations",
"total" = "All Fuel Stations",
"eth.production" = "Ethanol Production (thousand barrels)",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws",
drop = c("A", "E", "C", "P"))
fixest::etable(a, b, c, tex=TRUE, digits="r2",
fontsize = "small",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"tax_incentives" = "Tax Incentives",
"grant_incentives" = "Grant Incentives",
"other_incentives" = "Other Incentives",
"regulations" = "Regulations",
"total" = "All Fuel Stations",
"eth.production" = "Ethanol Production (thousand barrels)",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2022 E85 Stations on State Laws",
drop = c("A", "E", "C", "P"))
merge_final = read.csv("Data/Merging/merge_last.csv")
#run regression without state and year fixed effects
simple = lm(e85 ~ tax_incentives + grant_incentives + other_incentives + regulations + total + eth.production + corn.production + corn.prices + population, data = merge_final)
#import data set
mega = read.csv("Data/Merging/merge_final.csv")
#make plot of ethanol and corn production
#first decide which low ethanol values to drop
summary(mega$eth.production)
#make plot
scatter = mega |>
mutate(eth.production = eth.production/1000,
corn.production = corn.production/1000000) |>
filter(eth.production > 0) |>
ggplot(aes(x = corn.production, y = eth.production, color = state)) +
geom_point(size = 2) +
labs(x = "Corn Production (1 million bushels)",
y = "Ethanol Production (1 million barrels)",
title = "States Producing Ethanol: Ethanol on Corn Production")
scatter
#import data set
mega = read.csv("Data/Merging/merge_last.csv")
#make plot
scatter = mega |>
mutate(eth.production = eth.production/1000,
corn.production = corn.production/1000000) |>
filter(eth.production > 0) |>
ggplot(aes(x = corn.production, y = eth.production, color = state)) +
geom_point(size = 2) +
labs(x = "Corn Production (1 million bushels)",
y = "Ethanol Production (1 million barrels)",
title = "States Producing Ethanol: Ethanol on Corn Production")
scatter
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup()
View(legend_order)
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
select(state)
View(legend_order)
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup()
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(eth.production)
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(mean_eth_prod)
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(mean_eth_prod, desc = TRUE)
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(mean_eth_prod, desc = FALSE)
?rrange
?arrange
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
desc(mean_eth_prod)
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
desc(arrange(mean_eth_prod))
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(desc(mean_eth_prod)) |>
select(state)
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(desc(mean_eth_prod))
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(desc(mean_eth_prod)) |>
select(state)
scatter = mega |>
mutate(eth.production = eth.production/1000,
corn.production = corn.production/1000000) |>
filter(eth.production > 0) |>
ggplot(aes(x = corn.production, y = eth.production, color = state)) +
geom_point(size = 2) +
labs(x = "Corn Production (1 million bushels)",
y = "Ethanol Production (1 million barrels)",
title = "States Producing Ethanol: Ethanol on Corn Production") +
scale_color_discrete(limits = legend_order )
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(desc(mean_eth_prod)) |>
pull(state)
mega1 <- mega %>%
mutate(state = factor(state, levels = legend_order))
View(mega1)
scatter = mega1 |>
mutate(eth.production = eth.production/1000,
corn.production = corn.production/1000000) |>
filter(eth.production > 0) |>
ggplot(aes(x = corn.production, y = eth.production, color = state)) +
geom_point(size = 2) +
labs(x = "Corn Production (1 million bushels)",
y = "Ethanol Production (1 million barrels)",
title = "States Producing Ethanol: Ethanol on Corn Production") +
scale_color_discrete()
scatter
#save plot as png
ggsave("Outputs/Exploratory_Analysis/EthCornScatterByState_edited.png", scatter, "png")
#libraray needed packages
library(tidyverse)
library(ggplot2)
library(readr)
library(patchwork)
#setwd
#import data set
mega = read.csv("Data/Merging/merge_last.csv")
mega_sum = mega |>
mutate(total_leg = incentives + tax_incentives + grant_incentives + other_incentives + regulations)
legbar = mega_sum |>
filter(state != "Total") |>
ggplot(aes(y = total_leg, x = year)) +
geom_bar(stat = "identity", fill = "cadetblue3") +
labs(x = "Year", y = "Count of Active Legislation")
legbar
e85bar = mega_sum |>
filter(state != "Total") |>
ggplot(aes(y = e85, x = year)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Year", y = "Count of E85 Gas Stations")
e85bar
cornprodbar = mega_sum |>
filter(state != "Total") |>
mutate(corn.production = corn.production/1000000000) |>
ggplot(aes(y = corn.production, x = year)) +
geom_bar(stat = "identity", fill = "cadetblue3") +
labs(x = "Year", y = "Corn Production (1 billion bushels)")
cornprodbar
ethprodbar = mega_sum |>
filter(state != "Total") |>
mutate(eth.production = eth.production/1000) |>
ggplot(aes(y = eth.production, x = year)) +
geom_bar(stat = "identity", fill = "cadetblue3") +
labs(x = "Year", y = "Ethanol Production (1 million barrels)")
ethprodbar
#use patchwork to compile barcharts into one plot
drivers = ((e85bar|legbar)/(cornprodbar|ethprodbar)) +
plot_annotation(tag_levels = "A", title = "Visualizing Relationship between Count of E85 Stations and Variables of Interest")
drivers
#save plot
ggsave("Outputs/Exploratory_Analysis/E85Relationships_edited.png", drivers, "png")
#import data set
mega = read.csv("Data/Merging/merge_last.csv")
library(tidyverse)
library(ggplot2)
library(readr)
mega = read.csv("Data/Merging/merge_last.csv")
#make mega data into long format
table(mega$state)
US = mega |>
filter(state == "Total")
#looks like united states totals have not been calculated - let's do that
mega_sort = mega |>
filter(year !=2022) |>
dplyr::select(year, state_abb, enacted, incentives, tax_incentives, grant_incentives, other_incentives, regulations, eth.production, corn.production)
#columns to be summed
cols = c("enacted", "incentives", "tax_incentives", "grant_incentives", "other_incentives", "regulations", "eth.production", "corn.production")
#data frame containing only totals from the columns
totals = mega_sort |>
group_by(year) |>
summarise(across(cols, sum, na.rm = TRUE))
#make data frame with state as Total and years to prepare totals data frame for merging
state = data.frame(
state = c(rep("Total", 15)),
year = c(2007:2021))
total_state = left_join(state, totals, by = "year")
#make totals data long
sorted = total_state |>
dplyr::select(year, incentives, tax_incentives, grant_incentives, other_incentives, regulations)
list = c("incentives", "tax_incentives", "grant_incentives", "other_incentives", "regulations")
long <- sorted %>%
pivot_longer(cols = list, names_to = "type", values_to = "type.count")
#make stacked bar chart of US total regulations of each category
stacked = long |>
ggplot(aes(fill=type, y=type.count, x=year)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Count of US Total Active State-Level Legislation by Class",
x = "Year",
y = "Count",
fill = "Legislation Class") +
scale_fill_manual(values=c("azure3", "paleturquoise2", "cadetblue3","steelblue", "skyblue4"))
stacked
#save plot
ggsave("Outputs/Exploratory_Analysis/StackedTotalLeg_edited.png", stacked, "png")
#import data set
mega = read.csv("Data/Merging/merge_last.csv")
summary(mega$eth.production)
#make plot
#create max-min legend order
legend_order = mega |>
group_by(state) |>
summarize(mean_eth_prod = mean(eth.production, na.rm = TRUE)) |>
ungroup() |>
arrange(desc(mean_eth_prod)) |>
pull(state)
mega1 <- mega %>%
mutate(state = factor(state, levels = legend_order))
scatter = mega1 |>
mutate(eth.production = eth.production/1000,
corn.production = corn.production/1000000) |>
filter(eth.production > 0) |>
ggplot(aes(x = corn.production, y = eth.production, color = state)) +
geom_point(size = 2) +
labs(x = "Corn Production (1 million bushels)",
y = "Ethanol Production (1 million barrels)",
title = "States Producing Ethanol: Ethanol on Corn Production") +
scale_color_discrete()
scatter
#save plot as png
ggsave("Outputs/Exploratory_Analysis/EthCornScatterByState_edited.png", scatter, "png")
library(tidyverse)
library(ggplot2)
library(readr)
library(patchwork)
#setwd
#import data set
mega = read.csv("Data/Merging/merge_last.csv")
mega_sum = mega |>
mutate(total_leg = incentives + tax_incentives + grant_incentives + other_incentives + regulations)
legbar = mega_sum |>
filter(state != "Total") |>
ggplot(aes(y = total_leg, x = year)) +
geom_bar(stat = "identity", fill = "cadetblue3") +
labs(x = "Year", y = "Count of Active Legislation")
legbar
e85bar = mega_sum |>
filter(state != "Total") |>
ggplot(aes(y = e85, x = year)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Year", y = "Count of E85 Gas Stations")
e85bar
cornprodbar = mega_sum |>
filter(state != "Total") |>
mutate(corn.production = corn.production/1000000000) |>
ggplot(aes(y = corn.production, x = year)) +
geom_bar(stat = "identity", fill = "cadetblue3") +
labs(x = "Year", y = "Corn Production (1 billion bushels)")
cornprodbar
ethprodbar = mega_sum |>
filter(state != "Total") |>
mutate(eth.production = eth.production/1000) |>
ggplot(aes(y = eth.production, x = year)) +
geom_bar(stat = "identity", fill = "cadetblue3") +
labs(x = "Year", y = "Ethanol Production (1 million barrels)")
ethprodbar
#use patchwork to compile barcharts into one plot
drivers = ((e85bar|legbar)/(cornprodbar|ethprodbar)) +
plot_annotation(tag_levels = "A", title = "Relationship Between E85 Stations and Variables of Interest")
drivers
#save plot
ggsave("Outputs/Exploratory_Analysis/E85Relationships_edited.png", drivers, "png")
library(tidyverse)
library(fixest)
library(skimr)
library(xlsx)
merge_final = read.csv("Data/Merging/merge_last.csv")
#fixed effects - all states
a = feols(e85~ tax_incentives+ grant_incentives + other_incentives + regulations + total + eth.production + corn.production + corn.prices + population| year + state_abb, data = merge_final)
summary(a)
#look at relationship for states which are top 10 for ethanol production
merge_final_eth = merge_final |>
filter(state_abb == "IA" |
state_abb == "NE" |
state_abb == "IL" |
state_abb == "SD" |
state_abb == "MN" |
state_abb == "IN" |
state_abb == "OH" |
state_abb == "WI" |
state_abb == "KS" |
state_abb == "ND")
b = feols(e85~ tax_incentives+ grant_incentives + other_incentives + regulations + total + eth.production + corn.production + corn.prices + population| year + state_abb, data = merge_final_eth)
summary(b)
#look at relationship for states not in top 10 group for number of e85 stations
merge_final_loweth = merge_final |>
filter(state_abb != "IA" &
state_abb != "NE" &
state_abb != "IL" &
state_abb != "SD" &
state_abb != "MN" &
state_abb != "IN" &
state_abb != "OH" &
state_abb != "WI" &
state_abb != "KS" &
state_abb != "ND")
c = feols(e85~ tax_incentives+ grant_incentives + other_incentives + regulations + total + eth.production + corn.production + corn.prices + population| year + state_abb, data = merge_final_loweth)
summary(c)
#create lagged variables to account for time needed to build e85 stations
merge_final2 = merge_final |>
group_by(state)  |>
arrange(state, year, decreasing = TRUE)|>
mutate(incentives_lag1 = lag(incentives, n = 1),
incentives_lag2 = lag(incentives, n = 2),
incentives_lag3 = lag(incentives, n = 3),
regulations_lag1 = lag(regulations, n = 1),
regulations_lag2 = lag(regulations, n = 2),
regulations_lag3 = lag(regulations, n = 3)) |>
ungroup()
d = feols(e85~incentives + incentives_lag1 + incentives_lag2 + incentives_lag3 + regulations + regulations_lag1 + regulations_lag2 + regulations_lag3 + total + eth.production + corn.production + corn.prices + population| year + state_abb, data = merge_final2)
summary(d)
#create results table for all but lagged variables
columnlabels = c("All States", "Top 10 Ethanol Production", "Not Top 10 Ethanol Production")
fixest::etable(a, b, c, tex=TRUE, digits="r2",
fontsize = "small",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"tax_incentives" = "Tax Incentives",
"grant_incentives" = "Grant Incentives",
"other_incentives" = "Other Incentives",
"regulations" = "Regulations",
"total" = "All Fuel Stations",
"eth.production" = "Ethanol Production (thousand barrels)",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2021 E85 Stations on State Laws",
drop = c("A", "E", "C", "P"))
#create results table for lagged variables
fixest::etable(d, tex=TRUE, digits="r2",
fontsize = "small",
style.tex=fixest::style.tex("base"),
dict = c("e85" = "Number of E85 Stations",
"incentives" = "Incentives",
"incentives_lag1" = "Incentives (Lag 1 Year)",
"incentives_lag2" = "Incentives (Lag 2 Year)",
"incentives_lag3" = "Incentives (Lag 3 Year)",
"regulations" = "Regulations",
"regulations_lag1" = "Regulations (Lag 1 Year)",
"regulations_lag2" = "Regulations (Lag 2 Year)",
"regulations_lag3" = "Regulations (Lag 3 Year)",
"eth.production" = "Ethanol Production (thousand barrels)",
"total" = "All Fuel Stations",
"corn.production" = "Corn Production (bushels)",
"corn.prices" = "Corn Prices ($)",
"population" = "Population"),
title = "2007-2021 E85 Stations on State Laws with Lagged Law Variables",
drop = c("A", "E", "C", "P"))
